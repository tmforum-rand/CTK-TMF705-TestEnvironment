{"info":{"_postman_id":"0913c846-e733-4a25-a1bb-75de3bfc5ffd","name":"CTK-Test_Environment-4.0.0","schema":"https://schema.getpostman.com/json/collection/v2.1.0/collection.json"},"item":[{"name":"N0","item":[{"name":"Start","event":[{"listen":"prerequest","script":{"exec":["resourceToTest = pm.environment.get(\"resourceToTest\");","","if (resourceToTest.toLowerCase() == \"provisioningartifact\"){","    postman.setNextRequest(\"Post ProvisioningArtifact\")","}","","if (resourceToTest.toLowerCase() == \"testresourceapi\"){","    postman.setNextRequest(\"Post TestResourceAPI\")","}","if (resourceToTest.toLowerCase() == \"concreteenvironmentmetamodel\"){","    postman.setNextRequest(\"Post ConcreteEnvironmentMetaModel\")","}","if (resourceToTest.toLowerCase() == \"abstractenvironment\"){","    postman.setNextRequest(\"Post AbstractEnvironment\")","}"],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"www.example.com","host":["www","example","com"]}},"response":[]}]},{"name":"N1","item":[{"name":"Post ProvisioningArtifact","event":[{"listen":"test","script":{"exec":["var jsonData = pm.response.json();","","if (Array.isArray(jsonData)) { ","  ","    pm.test('Array not expected as response', function (){pm.expect.fail()});","  ","","}","","pm.test(\"Status code is 201\", function () {","  pm.response.to.have.status(201);","});","","var instance = pm.response.json();","var requiredAttributes = ['provisioningArtifactDefinition', 'description', 'href', 'id', 'provisioningArtifactDefinition', 'version'];","","pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","","","","pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","","pm.globals.set('DESCRIPTIONPA01', instance['description']);","pm.globals.set('HREFPA01', instance['href']);","pm.globals.set('IDPA01', instance['id']);","pm.globals.set('VERSIONPA01', instance['version']);","","pm.test('Body includes value held on description', function () {","  pm.expect(pm.response.text()).to.include(instance['description']);","});","pm.test('Body includes value held on href', function () {","  pm.expect(pm.response.text()).to.include(instance['href']);","});","pm.test('Body includes value held on id', function () {","  pm.expect(pm.response.text()).to.include(instance['id']);","});","pm.test('Body includes value held on version', function () {","  pm.expect(pm.response.text()).to.include(instance['version']);","});",""],"type":"text/javascript"}}],"request":{"method":"POST","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"body":{"mode":"raw","raw":"{\n  \"description\": \"Sample Sample provisioning artifact\",\n  \"provisioningArtifactDefinition\": {},\n  \"version\": \"1.2.3\"\n}"},"url":{"raw":"{{Test_Environment}}provisioningArtifact","host":["{{Test_Environment}}provisioningArtifact"]},"description":"This operation creates a ProvisioningArtifact"},"response":[]},{"name":"/ProvisioningArtifact","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['provisioningArtifactDefinition', 'description', 'href', 'id', 'provisioningArtifactDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDPA01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONPA01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONPA01');});","            pm.test('href is ' + pm.globals.get(\"HREFPA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPA01');});","            pm.test('id is ' + pm.globals.get(\"IDPA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPA01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONPA01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONPA01');});","        }","        if (instance.id == pm.globals.get(\"IDPA02\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONPA02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONPA02');});","            pm.test('href is ' + pm.globals.get(\"HREFPA02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPA02');});","            pm.test('id is ' + pm.globals.get(\"IDPA02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPA02');});","            pm.test('version is ' + pm.globals.get(\"VERSIONPA02\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONPA02');});","        }  ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['provisioningArtifactDefinition', 'description', 'href', 'id', 'provisioningArtifactDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDPA01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONPA01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONPA01');});","            pm.test('href is ' + pm.globals.get(\"HREFPA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPA01');});","            pm.test('id is ' + pm.globals.get(\"IDPA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPA01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONPA01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONPA01');});","        }","        if (instance.id == pm.globals.get(\"IDPA02\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONPA02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONPA02');});","            pm.test('href is ' + pm.globals.get(\"HREFPA02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPA02');});","            pm.test('id is ' + pm.globals.get(\"IDPA02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPA02');});","            pm.test('version is ' + pm.globals.get(\"VERSIONPA02\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONPA02');});","        }","   ","  }","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Environment}}provisioningArtifact","host":["{{Test_Environment}}provisioningArtifact"]},"description":"This operation search for the created ProvisioningArtifact"},"response":[]},{"name":"/ProvisioningArtifact/{{IDPA01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['provisioningArtifactDefinition', 'description', 'href', 'id', 'provisioningArtifactDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDPA01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONPA01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONPA01');});","            pm.test('href is ' + pm.globals.get(\"HREFPA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPA01');});","            pm.test('id is ' + pm.globals.get(\"IDPA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPA01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONPA01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONPA01');});","        }","        if (instance.id == pm.globals.get(\"IDPA02\")) {","            pm.test('IDPA02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['provisioningArtifactDefinition', 'description', 'href', 'id', 'provisioningArtifactDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDPA01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONPA01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONPA01');});","            pm.test('href is ' + pm.globals.get(\"HREFPA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPA01');});","            pm.test('id is ' + pm.globals.get(\"IDPA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPA01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONPA01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONPA01');});","        }","        if (instance.id == pm.globals.get(\"IDPA02\")) {","            pm.test('IDPA02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Environment}}provisioningArtifact/{{IDPA01}}","host":["{{Test_Environment}}provisioningArtifact"],"path":["{{IDPA01}}"]},"description":"This operation search for one of the created ProvisioningArtifact"},"response":[]}]},{"name":"N2","item":[{"name":"/ProvisioningArtifact?fields=description","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['id','href', 'description'];","      ","        pm.test('Instance must have id, href and filtered attribute', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)});","        pm.test('Instance has only id, href and filtered attribute', function () { pm.expect(requiredAttributes).to.include.members(Object.keys(instance))});","    });","","    ","}","else { ","  ","    pm.test('Array expected as response', function (){pm.expect.fail()});","  ","","}"],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Environment}}provisioningArtifact?fields=description","host":["{{Test_Environment}}provisioningArtifact"],"query":[{"key":"fields","value":"description"}]},"description":"This operation filter a ProvisioningArtifact"},"response":[]},{"name":"/ProvisioningArtifact?description={{DESCRIPTIONPA01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['provisioningArtifactDefinition', 'description', 'href', 'id', 'provisioningArtifactDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDPA01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONPA01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONPA01');});","            pm.test('href is ' + pm.globals.get(\"HREFPA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPA01');});","            pm.test('id is ' + pm.globals.get(\"IDPA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPA01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONPA01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONPA01');});","        }","        if (instance.id == pm.globals.get(\"IDPA02\")) {","            pm.test('IDPA02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['provisioningArtifactDefinition', 'description', 'href', 'id', 'provisioningArtifactDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDPA01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONPA01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONPA01');});","            pm.test('href is ' + pm.globals.get(\"HREFPA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPA01');});","            pm.test('id is ' + pm.globals.get(\"IDPA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPA01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONPA01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONPA01');});","        }","        if (instance.id == pm.globals.get(\"IDPA02\")) {","            pm.test('IDPA02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Environment}}provisioningArtifact?description={{DESCRIPTIONPA01}}","host":["{{Test_Environment}}provisioningArtifact"],"query":[{"key":"description","value":"{{DESCRIPTIONPA01}}"}]},"description":"This operation filter a ProvisioningArtifact"},"response":[]},{"name":"/ProvisioningArtifact?fields=id","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['id','href', 'id'];","      ","        pm.test('Instance must have id, href and filtered attribute', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)});","        pm.test('Instance has only id, href and filtered attribute', function () { pm.expect(requiredAttributes).to.include.members(Object.keys(instance))});","    });","","    ","}","else { ","  ","    pm.test('Array expected as response', function (){pm.expect.fail()});","  ","","}"],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Environment}}provisioningArtifact?fields=id","host":["{{Test_Environment}}provisioningArtifact"],"query":[{"key":"fields","value":"id"}]},"description":"This operation filter a ProvisioningArtifact"},"response":[]},{"name":"/ProvisioningArtifact?id={{IDPA01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['provisioningArtifactDefinition', 'description', 'href', 'id', 'provisioningArtifactDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDPA01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONPA01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONPA01');});","            pm.test('href is ' + pm.globals.get(\"HREFPA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPA01');});","            pm.test('id is ' + pm.globals.get(\"IDPA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPA01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONPA01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONPA01');});","        }","        if (instance.id == pm.globals.get(\"IDPA02\")) {","            pm.test('IDPA02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['provisioningArtifactDefinition', 'description', 'href', 'id', 'provisioningArtifactDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDPA01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONPA01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONPA01');});","            pm.test('href is ' + pm.globals.get(\"HREFPA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPA01');});","            pm.test('id is ' + pm.globals.get(\"IDPA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPA01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONPA01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONPA01');});","        }","        if (instance.id == pm.globals.get(\"IDPA02\")) {","            pm.test('IDPA02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Environment}}provisioningArtifact?id={{IDPA01}}","host":["{{Test_Environment}}provisioningArtifact"],"query":[{"key":"id","value":"{{IDPA01}}"}]},"description":"This operation filter a ProvisioningArtifact"},"response":[]},{"name":"/ProvisioningArtifact?fields=version","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['id','href', 'version'];","      ","        pm.test('Instance must have id, href and filtered attribute', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)});","        pm.test('Instance has only id, href and filtered attribute', function () { pm.expect(requiredAttributes).to.include.members(Object.keys(instance))});","    });","","    ","}","else { ","  ","    pm.test('Array expected as response', function (){pm.expect.fail()});","  ","","}"],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Environment}}provisioningArtifact?fields=version","host":["{{Test_Environment}}provisioningArtifact"],"query":[{"key":"fields","value":"version"}]},"description":"This operation filter a ProvisioningArtifact"},"response":[]},{"name":"/ProvisioningArtifact?version={{VERSIONPA01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['provisioningArtifactDefinition', 'description', 'href', 'id', 'provisioningArtifactDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDPA01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONPA01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONPA01');});","            pm.test('href is ' + pm.globals.get(\"HREFPA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPA01');});","            pm.test('id is ' + pm.globals.get(\"IDPA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPA01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONPA01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONPA01');});","        }","        if (instance.id == pm.globals.get(\"IDPA02\")) {","            pm.test('IDPA02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['provisioningArtifactDefinition', 'description', 'href', 'id', 'provisioningArtifactDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDPA01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONPA01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONPA01');});","            pm.test('href is ' + pm.globals.get(\"HREFPA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPA01');});","            pm.test('id is ' + pm.globals.get(\"IDPA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPA01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONPA01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONPA01');});","        }","        if (instance.id == pm.globals.get(\"IDPA02\")) {","            pm.test('IDPA02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Environment}}provisioningArtifact?version={{VERSIONPA01}}","host":["{{Test_Environment}}provisioningArtifact"],"query":[{"key":"version","value":"{{VERSIONPA01}}"}]},"description":"This operation filter a ProvisioningArtifact"},"response":[]}]},{"name":"E1","item":[{"name":"/ProvisioningArtifact/404ID","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 404\", function () {","    pm.response.to.have.status(404);","});","","","postman.setNextRequest(null);"],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Environment}}ProvisioningArtifact/c8f2f97c-29a4-4c8e-8f94-01d881113d97","host":["{{Test_Environment}}ProvisioningArtifact"],"path":["c8f2f97c-29a4-4c8e-8f94-01d881113d97"]},"description":"This operation search for one of the created ProvisioningArtifact"},"response":[]}]},{"name":"N1","item":[{"name":"Post TestResourceAPI","event":[{"listen":"test","script":{"exec":["var jsonData = pm.response.json();","","if (Array.isArray(jsonData)) { ","  ","    pm.test('Array not expected as response', function (){pm.expect.fail()});","  ","","}","","pm.test(\"Status code is 201\", function () {","  pm.response.to.have.status(201);","});","","var instance = pm.response.json();","var requiredAttributes = ['testResourceAPIDefinition', 'description', 'href', 'id', 'testResourceAPIDefinition', 'version'];","","pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","","","","pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","","pm.globals.set('DESCRIPTIONTRAPI01', instance['description']);","pm.globals.set('HREFTRAPI01', instance['href']);","pm.globals.set('IDTRAPI01', instance['id']);","pm.globals.set('VERSIONTRAPI01', instance['version']);","","pm.test('Body includes value held on description', function () {","  pm.expect(pm.response.text()).to.include(instance['description']);","});","pm.test('Body includes value held on href', function () {","  pm.expect(pm.response.text()).to.include(instance['href']);","});","pm.test('Body includes value held on id', function () {","  pm.expect(pm.response.text()).to.include(instance['id']);","});","pm.test('Body includes value held on version', function () {","  pm.expect(pm.response.text()).to.include(instance['version']);","});",""],"type":"text/javascript"}}],"request":{"method":"POST","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"body":{"mode":"raw","raw":"{\n  \"description\": \"Sample abstract test resource API\",\n  \"testResourceAPIDefinition\": {},\n  \"version\": \"1.2.3\"\n}"},"url":{"raw":"{{Test_Environment}}testResourceAPI","host":["{{Test_Environment}}testResourceAPI"]},"description":"This operation creates a TestResourceAPI"},"response":[]},{"name":"/TestResourceAPI","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['testResourceAPIDefinition', 'description', 'href', 'id', 'testResourceAPIDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDTRAPI01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTRAPI01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTRAPI01');});","            pm.test('href is ' + pm.globals.get(\"HREFTRAPI01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTRAPI01');});","            pm.test('id is ' + pm.globals.get(\"IDTRAPI01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTRAPI01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONTRAPI01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTRAPI01');});","        }","        if (instance.id == pm.globals.get(\"IDTRAPI02\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTRAPI02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTRAPI02');});","            pm.test('href is ' + pm.globals.get(\"HREFTRAPI02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTRAPI02');});","            pm.test('id is ' + pm.globals.get(\"IDTRAPI02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTRAPI02');});","            pm.test('version is ' + pm.globals.get(\"VERSIONTRAPI02\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTRAPI02');});","        }  ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['testResourceAPIDefinition', 'description', 'href', 'id', 'testResourceAPIDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDTRAPI01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTRAPI01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTRAPI01');});","            pm.test('href is ' + pm.globals.get(\"HREFTRAPI01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTRAPI01');});","            pm.test('id is ' + pm.globals.get(\"IDTRAPI01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTRAPI01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONTRAPI01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTRAPI01');});","        }","        if (instance.id == pm.globals.get(\"IDTRAPI02\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTRAPI02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTRAPI02');});","            pm.test('href is ' + pm.globals.get(\"HREFTRAPI02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTRAPI02');});","            pm.test('id is ' + pm.globals.get(\"IDTRAPI02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTRAPI02');});","            pm.test('version is ' + pm.globals.get(\"VERSIONTRAPI02\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTRAPI02');});","        }","   ","  }","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Environment}}testResourceAPI","host":["{{Test_Environment}}testResourceAPI"]},"description":"This operation search for the created TestResourceAPI"},"response":[]},{"name":"/TestResourceAPI/{{IDTRAPI01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['testResourceAPIDefinition', 'description', 'href', 'id', 'testResourceAPIDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDTRAPI01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTRAPI01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTRAPI01');});","            pm.test('href is ' + pm.globals.get(\"HREFTRAPI01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTRAPI01');});","            pm.test('id is ' + pm.globals.get(\"IDTRAPI01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTRAPI01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONTRAPI01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTRAPI01');});","        }","        if (instance.id == pm.globals.get(\"IDTRAPI02\")) {","            pm.test('IDTRAPI02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['testResourceAPIDefinition', 'description', 'href', 'id', 'testResourceAPIDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDTRAPI01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTRAPI01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTRAPI01');});","            pm.test('href is ' + pm.globals.get(\"HREFTRAPI01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTRAPI01');});","            pm.test('id is ' + pm.globals.get(\"IDTRAPI01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTRAPI01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONTRAPI01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTRAPI01');});","        }","        if (instance.id == pm.globals.get(\"IDTRAPI02\")) {","            pm.test('IDTRAPI02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Environment}}testResourceAPI/{{IDTRAPI01}}","host":["{{Test_Environment}}testResourceAPI"],"path":["{{IDTRAPI01}}"]},"description":"This operation search for one of the created TestResourceAPI"},"response":[]}]},{"name":"N2","item":[{"name":"/TestResourceAPI?fields=description","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['id','href', 'description'];","      ","        pm.test('Instance must have id, href and filtered attribute', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)});","        pm.test('Instance has only id, href and filtered attribute', function () { pm.expect(requiredAttributes).to.include.members(Object.keys(instance))});","    });","","    ","}","else { ","  ","    pm.test('Array expected as response', function (){pm.expect.fail()});","  ","","}"],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Environment}}testResourceAPI?fields=description","host":["{{Test_Environment}}testResourceAPI"],"query":[{"key":"fields","value":"description"}]},"description":"This operation filter a TestResourceAPI"},"response":[]},{"name":"/TestResourceAPI?description={{DESCRIPTIONTRAPI01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['testResourceAPIDefinition', 'description', 'href', 'id', 'testResourceAPIDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDTRAPI01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTRAPI01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTRAPI01');});","            pm.test('href is ' + pm.globals.get(\"HREFTRAPI01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTRAPI01');});","            pm.test('id is ' + pm.globals.get(\"IDTRAPI01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTRAPI01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONTRAPI01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTRAPI01');});","        }","        if (instance.id == pm.globals.get(\"IDTRAPI02\")) {","            pm.test('IDTRAPI02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['testResourceAPIDefinition', 'description', 'href', 'id', 'testResourceAPIDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDTRAPI01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTRAPI01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTRAPI01');});","            pm.test('href is ' + pm.globals.get(\"HREFTRAPI01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTRAPI01');});","            pm.test('id is ' + pm.globals.get(\"IDTRAPI01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTRAPI01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONTRAPI01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTRAPI01');});","        }","        if (instance.id == pm.globals.get(\"IDTRAPI02\")) {","            pm.test('IDTRAPI02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Environment}}testResourceAPI?description={{DESCRIPTIONTRAPI01}}","host":["{{Test_Environment}}testResourceAPI"],"query":[{"key":"description","value":"{{DESCRIPTIONTRAPI01}}"}]},"description":"This operation filter a TestResourceAPI"},"response":[]},{"name":"/TestResourceAPI?fields=id","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['id','href', 'id'];","      ","        pm.test('Instance must have id, href and filtered attribute', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)});","        pm.test('Instance has only id, href and filtered attribute', function () { pm.expect(requiredAttributes).to.include.members(Object.keys(instance))});","    });","","    ","}","else { ","  ","    pm.test('Array expected as response', function (){pm.expect.fail()});","  ","","}"],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Environment}}testResourceAPI?fields=id","host":["{{Test_Environment}}testResourceAPI"],"query":[{"key":"fields","value":"id"}]},"description":"This operation filter a TestResourceAPI"},"response":[]},{"name":"/TestResourceAPI?id={{IDTRAPI01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['testResourceAPIDefinition', 'description', 'href', 'id', 'testResourceAPIDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDTRAPI01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTRAPI01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTRAPI01');});","            pm.test('href is ' + pm.globals.get(\"HREFTRAPI01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTRAPI01');});","            pm.test('id is ' + pm.globals.get(\"IDTRAPI01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTRAPI01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONTRAPI01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTRAPI01');});","        }","        if (instance.id == pm.globals.get(\"IDTRAPI02\")) {","            pm.test('IDTRAPI02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['testResourceAPIDefinition', 'description', 'href', 'id', 'testResourceAPIDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDTRAPI01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTRAPI01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTRAPI01');});","            pm.test('href is ' + pm.globals.get(\"HREFTRAPI01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTRAPI01');});","            pm.test('id is ' + pm.globals.get(\"IDTRAPI01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTRAPI01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONTRAPI01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTRAPI01');});","        }","        if (instance.id == pm.globals.get(\"IDTRAPI02\")) {","            pm.test('IDTRAPI02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Environment}}testResourceAPI?id={{IDTRAPI01}}","host":["{{Test_Environment}}testResourceAPI"],"query":[{"key":"id","value":"{{IDTRAPI01}}"}]},"description":"This operation filter a TestResourceAPI"},"response":[]},{"name":"/TestResourceAPI?fields=version","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['id','href', 'version'];","      ","        pm.test('Instance must have id, href and filtered attribute', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)});","        pm.test('Instance has only id, href and filtered attribute', function () { pm.expect(requiredAttributes).to.include.members(Object.keys(instance))});","    });","","    ","}","else { ","  ","    pm.test('Array expected as response', function (){pm.expect.fail()});","  ","","}"],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Environment}}testResourceAPI?fields=version","host":["{{Test_Environment}}testResourceAPI"],"query":[{"key":"fields","value":"version"}]},"description":"This operation filter a TestResourceAPI"},"response":[]},{"name":"/TestResourceAPI?version={{VERSIONTRAPI01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['testResourceAPIDefinition', 'description', 'href', 'id', 'testResourceAPIDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDTRAPI01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTRAPI01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTRAPI01');});","            pm.test('href is ' + pm.globals.get(\"HREFTRAPI01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTRAPI01');});","            pm.test('id is ' + pm.globals.get(\"IDTRAPI01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTRAPI01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONTRAPI01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTRAPI01');});","        }","        if (instance.id == pm.globals.get(\"IDTRAPI02\")) {","            pm.test('IDTRAPI02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['testResourceAPIDefinition', 'description', 'href', 'id', 'testResourceAPIDefinition', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDTRAPI01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONTRAPI01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONTRAPI01');});","            pm.test('href is ' + pm.globals.get(\"HREFTRAPI01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTRAPI01');});","            pm.test('id is ' + pm.globals.get(\"IDTRAPI01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTRAPI01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONTRAPI01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONTRAPI01');});","        }","        if (instance.id == pm.globals.get(\"IDTRAPI02\")) {","            pm.test('IDTRAPI02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Environment}}testResourceAPI?version={{VERSIONTRAPI01}}","host":["{{Test_Environment}}testResourceAPI"],"query":[{"key":"version","value":"{{VERSIONTRAPI01}}"}]},"description":"This operation filter a TestResourceAPI"},"response":[]}]},{"name":"E1","item":[{"name":"/TestResourceAPI/404ID","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 404\", function () {","    pm.response.to.have.status(404);","});","","","postman.setNextRequest(null);"],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Environment}}TestResourceAPI/1917fe91-2740-45d4-a163-fbf35efcdf88","host":["{{Test_Environment}}TestResourceAPI"],"path":["1917fe91-2740-45d4-a163-fbf35efcdf88"]},"description":"This operation search for one of the created TestResourceAPI"},"response":[]}]},{"name":"N1","item":[{"name":"Post ConcreteEnvironmentMetaModel","event":[{"listen":"test","script":{"exec":["var jsonData = pm.response.json();","","if (Array.isArray(jsonData)) { ","  ","    pm.test('Array not expected as response', function (){pm.expect.fail()});","  ","","}","","pm.test(\"Status code is 201\", function () {","  pm.response.to.have.status(201);","});","","var instance = pm.response.json();","var requiredAttributes = ['concreteEnvironmentMetaModelDefinition', 'concreteEnvironmentMetaModelDefinition', 'description', 'href', 'id', 'version'];","","pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","","","","pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","","pm.globals.set('DESCRIPTIONCEMM01', instance['description']);","pm.globals.set('HREFCEMM01', instance['href']);","pm.globals.set('IDCEMM01', instance['id']);","pm.globals.set('VERSIONCEMM01', instance['version']);","","pm.test('Body includes value held on description', function () {","  pm.expect(pm.response.text()).to.include(instance['description']);","});","pm.test('Body includes value held on href', function () {","  pm.expect(pm.response.text()).to.include(instance['href']);","});","pm.test('Body includes value held on id', function () {","  pm.expect(pm.response.text()).to.include(instance['id']);","});","pm.test('Body includes value held on version', function () {","  pm.expect(pm.response.text()).to.include(instance['version']);","});",""],"type":"text/javascript"}}],"request":{"method":"POST","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"body":{"mode":"raw","raw":"{\n  \"concreteEnvironmentMetaModelDefinition\": {},\n  \"description\": \"Sample concrete environment metamodel\",\n  \"version\": \"1.2.3\"\n}"},"url":{"raw":"{{Test_Environment}}concreteEnvironmentMetaModel","host":["{{Test_Environment}}concreteEnvironmentMetaModel"]},"description":"This operation creates a ConcreteEnvironmentMetaModel"},"response":[]},{"name":"/ConcreteEnvironmentMetaModel","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['concreteEnvironmentMetaModelDefinition', 'concreteEnvironmentMetaModelDefinition', 'description', 'href', 'id', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDCEMM01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONCEMM01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONCEMM01');});","            pm.test('href is ' + pm.globals.get(\"HREFCEMM01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFCEMM01');});","            pm.test('id is ' + pm.globals.get(\"IDCEMM01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDCEMM01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONCEMM01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONCEMM01');});","        }","        if (instance.id == pm.globals.get(\"IDCEMM02\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONCEMM02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONCEMM02');});","            pm.test('href is ' + pm.globals.get(\"HREFCEMM02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFCEMM02');});","            pm.test('id is ' + pm.globals.get(\"IDCEMM02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDCEMM02');});","            pm.test('version is ' + pm.globals.get(\"VERSIONCEMM02\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONCEMM02');});","        }  ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['concreteEnvironmentMetaModelDefinition', 'concreteEnvironmentMetaModelDefinition', 'description', 'href', 'id', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDCEMM01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONCEMM01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONCEMM01');});","            pm.test('href is ' + pm.globals.get(\"HREFCEMM01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFCEMM01');});","            pm.test('id is ' + pm.globals.get(\"IDCEMM01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDCEMM01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONCEMM01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONCEMM01');});","        }","        if (instance.id == pm.globals.get(\"IDCEMM02\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONCEMM02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONCEMM02');});","            pm.test('href is ' + pm.globals.get(\"HREFCEMM02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFCEMM02');});","            pm.test('id is ' + pm.globals.get(\"IDCEMM02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDCEMM02');});","            pm.test('version is ' + pm.globals.get(\"VERSIONCEMM02\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONCEMM02');});","        }","   ","  }","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Environment}}concreteEnvironmentMetaModel","host":["{{Test_Environment}}concreteEnvironmentMetaModel"]},"description":"This operation search for the created ConcreteEnvironmentMetaModel"},"response":[]},{"name":"/ConcreteEnvironmentMetaModel/{{IDCEMM01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['concreteEnvironmentMetaModelDefinition', 'concreteEnvironmentMetaModelDefinition', 'description', 'href', 'id', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDCEMM01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONCEMM01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONCEMM01');});","            pm.test('href is ' + pm.globals.get(\"HREFCEMM01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFCEMM01');});","            pm.test('id is ' + pm.globals.get(\"IDCEMM01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDCEMM01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONCEMM01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONCEMM01');});","        }","        if (instance.id == pm.globals.get(\"IDCEMM02\")) {","            pm.test('IDCEMM02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['concreteEnvironmentMetaModelDefinition', 'concreteEnvironmentMetaModelDefinition', 'description', 'href', 'id', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDCEMM01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONCEMM01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONCEMM01');});","            pm.test('href is ' + pm.globals.get(\"HREFCEMM01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFCEMM01');});","            pm.test('id is ' + pm.globals.get(\"IDCEMM01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDCEMM01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONCEMM01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONCEMM01');});","        }","        if (instance.id == pm.globals.get(\"IDCEMM02\")) {","            pm.test('IDCEMM02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Environment}}concreteEnvironmentMetaModel/{{IDCEMM01}}","host":["{{Test_Environment}}concreteEnvironmentMetaModel"],"path":["{{IDCEMM01}}"]},"description":"This operation search for one of the created ConcreteEnvironmentMetaModel"},"response":[]}]},{"name":"N2","item":[{"name":"/ConcreteEnvironmentMetaModel?fields=description","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['id','href', 'description'];","      ","        pm.test('Instance must have id, href and filtered attribute', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)});","        pm.test('Instance has only id, href and filtered attribute', function () { pm.expect(requiredAttributes).to.include.members(Object.keys(instance))});","    });","","    ","}","else { ","  ","    pm.test('Array expected as response', function (){pm.expect.fail()});","  ","","}"],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Environment}}concreteEnvironmentMetaModel?fields=description","host":["{{Test_Environment}}concreteEnvironmentMetaModel"],"query":[{"key":"fields","value":"description"}]},"description":"This operation filter a ConcreteEnvironmentMetaModel"},"response":[]},{"name":"/ConcreteEnvironmentMetaModel?description={{DESCRIPTIONCEMM01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['concreteEnvironmentMetaModelDefinition', 'concreteEnvironmentMetaModelDefinition', 'description', 'href', 'id', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDCEMM01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONCEMM01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONCEMM01');});","            pm.test('href is ' + pm.globals.get(\"HREFCEMM01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFCEMM01');});","            pm.test('id is ' + pm.globals.get(\"IDCEMM01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDCEMM01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONCEMM01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONCEMM01');});","        }","        if (instance.id == pm.globals.get(\"IDCEMM02\")) {","            pm.test('IDCEMM02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['concreteEnvironmentMetaModelDefinition', 'concreteEnvironmentMetaModelDefinition', 'description', 'href', 'id', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDCEMM01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONCEMM01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONCEMM01');});","            pm.test('href is ' + pm.globals.get(\"HREFCEMM01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFCEMM01');});","            pm.test('id is ' + pm.globals.get(\"IDCEMM01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDCEMM01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONCEMM01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONCEMM01');});","        }","        if (instance.id == pm.globals.get(\"IDCEMM02\")) {","            pm.test('IDCEMM02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Environment}}concreteEnvironmentMetaModel?description={{DESCRIPTIONCEMM01}}","host":["{{Test_Environment}}concreteEnvironmentMetaModel"],"query":[{"key":"description","value":"{{DESCRIPTIONCEMM01}}"}]},"description":"This operation filter a ConcreteEnvironmentMetaModel"},"response":[]},{"name":"/ConcreteEnvironmentMetaModel?fields=id","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['id','href', 'id'];","      ","        pm.test('Instance must have id, href and filtered attribute', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)});","        pm.test('Instance has only id, href and filtered attribute', function () { pm.expect(requiredAttributes).to.include.members(Object.keys(instance))});","    });","","    ","}","else { ","  ","    pm.test('Array expected as response', function (){pm.expect.fail()});","  ","","}"],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Environment}}concreteEnvironmentMetaModel?fields=id","host":["{{Test_Environment}}concreteEnvironmentMetaModel"],"query":[{"key":"fields","value":"id"}]},"description":"This operation filter a ConcreteEnvironmentMetaModel"},"response":[]},{"name":"/ConcreteEnvironmentMetaModel?id={{IDCEMM01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['concreteEnvironmentMetaModelDefinition', 'concreteEnvironmentMetaModelDefinition', 'description', 'href', 'id', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDCEMM01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONCEMM01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONCEMM01');});","            pm.test('href is ' + pm.globals.get(\"HREFCEMM01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFCEMM01');});","            pm.test('id is ' + pm.globals.get(\"IDCEMM01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDCEMM01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONCEMM01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONCEMM01');});","        }","        if (instance.id == pm.globals.get(\"IDCEMM02\")) {","            pm.test('IDCEMM02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['concreteEnvironmentMetaModelDefinition', 'concreteEnvironmentMetaModelDefinition', 'description', 'href', 'id', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDCEMM01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONCEMM01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONCEMM01');});","            pm.test('href is ' + pm.globals.get(\"HREFCEMM01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFCEMM01');});","            pm.test('id is ' + pm.globals.get(\"IDCEMM01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDCEMM01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONCEMM01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONCEMM01');});","        }","        if (instance.id == pm.globals.get(\"IDCEMM02\")) {","            pm.test('IDCEMM02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Environment}}concreteEnvironmentMetaModel?id={{IDCEMM01}}","host":["{{Test_Environment}}concreteEnvironmentMetaModel"],"query":[{"key":"id","value":"{{IDCEMM01}}"}]},"description":"This operation filter a ConcreteEnvironmentMetaModel"},"response":[]},{"name":"/ConcreteEnvironmentMetaModel?fields=version","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['id','href', 'version'];","      ","        pm.test('Instance must have id, href and filtered attribute', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)});","        pm.test('Instance has only id, href and filtered attribute', function () { pm.expect(requiredAttributes).to.include.members(Object.keys(instance))});","    });","","    ","}","else { ","  ","    pm.test('Array expected as response', function (){pm.expect.fail()});","  ","","}"],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Environment}}concreteEnvironmentMetaModel?fields=version","host":["{{Test_Environment}}concreteEnvironmentMetaModel"],"query":[{"key":"fields","value":"version"}]},"description":"This operation filter a ConcreteEnvironmentMetaModel"},"response":[]},{"name":"/ConcreteEnvironmentMetaModel?version={{VERSIONCEMM01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['concreteEnvironmentMetaModelDefinition', 'concreteEnvironmentMetaModelDefinition', 'description', 'href', 'id', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDCEMM01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONCEMM01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONCEMM01');});","            pm.test('href is ' + pm.globals.get(\"HREFCEMM01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFCEMM01');});","            pm.test('id is ' + pm.globals.get(\"IDCEMM01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDCEMM01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONCEMM01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONCEMM01');});","        }","        if (instance.id == pm.globals.get(\"IDCEMM02\")) {","            pm.test('IDCEMM02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['concreteEnvironmentMetaModelDefinition', 'concreteEnvironmentMetaModelDefinition', 'description', 'href', 'id', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDCEMM01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONCEMM01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONCEMM01');});","            pm.test('href is ' + pm.globals.get(\"HREFCEMM01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFCEMM01');});","            pm.test('id is ' + pm.globals.get(\"IDCEMM01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDCEMM01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONCEMM01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONCEMM01');});","        }","        if (instance.id == pm.globals.get(\"IDCEMM02\")) {","            pm.test('IDCEMM02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Environment}}concreteEnvironmentMetaModel?version={{VERSIONCEMM01}}","host":["{{Test_Environment}}concreteEnvironmentMetaModel"],"query":[{"key":"version","value":"{{VERSIONCEMM01}}"}]},"description":"This operation filter a ConcreteEnvironmentMetaModel"},"response":[]}]},{"name":"E1","item":[{"name":"/ConcreteEnvironmentMetaModel/404ID","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 404\", function () {","    pm.response.to.have.status(404);","});","","","postman.setNextRequest(null);"],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Environment}}ConcreteEnvironmentMetaModel/154a42cb-71f0-431c-81da-9c21869f43c5","host":["{{Test_Environment}}ConcreteEnvironmentMetaModel"],"path":["154a42cb-71f0-431c-81da-9c21869f43c5"]},"description":"This operation search for one of the created ConcreteEnvironmentMetaModel"},"response":[]}]},{"name":"N1","item":[{"name":"Post AbstractEnvironment","event":[{"listen":"test","script":{"exec":["var jsonData = pm.response.json();","","if (Array.isArray(jsonData)) { ","  ","    pm.test('Array not expected as response', function (){pm.expect.fail()});","  ","","}","","pm.test(\"Status code is 201\", function () {","  pm.response.to.have.status(201);","});","","var instance = pm.response.json();","var requiredAttributes = ['abstractEnvironmentDefinition', 'abstractEnvironmentDefinition', 'description', 'href', 'id', 'version'];","","pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","","","","pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","","pm.globals.set('DESCRIPTIONAE01', instance['description']);","pm.globals.set('HREFAE01', instance['href']);","pm.globals.set('IDAE01', instance['id']);","pm.globals.set('VERSIONAE01', instance['version']);","","pm.test('Body includes value held on description', function () {","  pm.expect(pm.response.text()).to.include(instance['description']);","});","pm.test('Body includes value held on href', function () {","  pm.expect(pm.response.text()).to.include(instance['href']);","});","pm.test('Body includes value held on id', function () {","  pm.expect(pm.response.text()).to.include(instance['id']);","});","pm.test('Body includes value held on version', function () {","  pm.expect(pm.response.text()).to.include(instance['version']);","});",""],"type":"text/javascript"}}],"request":{"method":"POST","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"body":{"mode":"raw","raw":"{\n  \"abstractEnvironmentDefinition\": {},\n  \"description\": \"Sample abstract test environment\",\n  \"version\": \"1.2.3\"\n}"},"url":{"raw":"{{Test_Environment}}abstractEnvironment","host":["{{Test_Environment}}abstractEnvironment"]},"description":"This operation creates a AbstractEnvironment"},"response":[]},{"name":"/AbstractEnvironment","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['abstractEnvironmentDefinition', 'abstractEnvironmentDefinition', 'description', 'href', 'id', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDAE01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAE01');});","            pm.test('href is ' + pm.globals.get(\"HREFAE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAE01');});","            pm.test('id is ' + pm.globals.get(\"IDAE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAE01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONAE01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAE01');});","        }","        if (instance.id == pm.globals.get(\"IDAE02\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAE02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAE02');});","            pm.test('href is ' + pm.globals.get(\"HREFAE02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAE02');});","            pm.test('id is ' + pm.globals.get(\"IDAE02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAE02');});","            pm.test('version is ' + pm.globals.get(\"VERSIONAE02\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAE02');});","        }  ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['abstractEnvironmentDefinition', 'abstractEnvironmentDefinition', 'description', 'href', 'id', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDAE01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAE01');});","            pm.test('href is ' + pm.globals.get(\"HREFAE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAE01');});","            pm.test('id is ' + pm.globals.get(\"IDAE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAE01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONAE01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAE01');});","        }","        if (instance.id == pm.globals.get(\"IDAE02\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAE02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAE02');});","            pm.test('href is ' + pm.globals.get(\"HREFAE02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAE02');});","            pm.test('id is ' + pm.globals.get(\"IDAE02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAE02');});","            pm.test('version is ' + pm.globals.get(\"VERSIONAE02\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAE02');});","        }","   ","  }","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Environment}}abstractEnvironment","host":["{{Test_Environment}}abstractEnvironment"]},"description":"This operation search for the created AbstractEnvironment"},"response":[]},{"name":"/AbstractEnvironment/{{IDAE01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['abstractEnvironmentDefinition', 'abstractEnvironmentDefinition', 'description', 'href', 'id', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDAE01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAE01');});","            pm.test('href is ' + pm.globals.get(\"HREFAE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAE01');});","            pm.test('id is ' + pm.globals.get(\"IDAE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAE01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONAE01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAE01');});","        }","        if (instance.id == pm.globals.get(\"IDAE02\")) {","            pm.test('IDAE02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['abstractEnvironmentDefinition', 'abstractEnvironmentDefinition', 'description', 'href', 'id', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDAE01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAE01');});","            pm.test('href is ' + pm.globals.get(\"HREFAE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAE01');});","            pm.test('id is ' + pm.globals.get(\"IDAE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAE01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONAE01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAE01');});","        }","        if (instance.id == pm.globals.get(\"IDAE02\")) {","            pm.test('IDAE02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Environment}}abstractEnvironment/{{IDAE01}}","host":["{{Test_Environment}}abstractEnvironment"],"path":["{{IDAE01}}"]},"description":"This operation search for one of the created AbstractEnvironment"},"response":[]}]},{"name":"N2","item":[{"name":"/AbstractEnvironment?fields=description","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['id','href', 'description'];","      ","        pm.test('Instance must have id, href and filtered attribute', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)});","        pm.test('Instance has only id, href and filtered attribute', function () { pm.expect(requiredAttributes).to.include.members(Object.keys(instance))});","    });","","    ","}","else { ","  ","    pm.test('Array expected as response', function (){pm.expect.fail()});","  ","","}"],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Environment}}abstractEnvironment?fields=description","host":["{{Test_Environment}}abstractEnvironment"],"query":[{"key":"fields","value":"description"}]},"description":"This operation filter a AbstractEnvironment"},"response":[]},{"name":"/AbstractEnvironment?description={{DESCRIPTIONAE01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['abstractEnvironmentDefinition', 'abstractEnvironmentDefinition', 'description', 'href', 'id', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDAE01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAE01');});","            pm.test('href is ' + pm.globals.get(\"HREFAE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAE01');});","            pm.test('id is ' + pm.globals.get(\"IDAE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAE01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONAE01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAE01');});","        }","        if (instance.id == pm.globals.get(\"IDAE02\")) {","            pm.test('IDAE02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['abstractEnvironmentDefinition', 'abstractEnvironmentDefinition', 'description', 'href', 'id', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDAE01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAE01');});","            pm.test('href is ' + pm.globals.get(\"HREFAE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAE01');});","            pm.test('id is ' + pm.globals.get(\"IDAE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAE01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONAE01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAE01');});","        }","        if (instance.id == pm.globals.get(\"IDAE02\")) {","            pm.test('IDAE02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Environment}}abstractEnvironment?description={{DESCRIPTIONAE01}}","host":["{{Test_Environment}}abstractEnvironment"],"query":[{"key":"description","value":"{{DESCRIPTIONAE01}}"}]},"description":"This operation filter a AbstractEnvironment"},"response":[]},{"name":"/AbstractEnvironment?fields=id","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['id','href', 'id'];","      ","        pm.test('Instance must have id, href and filtered attribute', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)});","        pm.test('Instance has only id, href and filtered attribute', function () { pm.expect(requiredAttributes).to.include.members(Object.keys(instance))});","    });","","    ","}","else { ","  ","    pm.test('Array expected as response', function (){pm.expect.fail()});","  ","","}"],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Environment}}abstractEnvironment?fields=id","host":["{{Test_Environment}}abstractEnvironment"],"query":[{"key":"fields","value":"id"}]},"description":"This operation filter a AbstractEnvironment"},"response":[]},{"name":"/AbstractEnvironment?id={{IDAE01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['abstractEnvironmentDefinition', 'abstractEnvironmentDefinition', 'description', 'href', 'id', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDAE01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAE01');});","            pm.test('href is ' + pm.globals.get(\"HREFAE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAE01');});","            pm.test('id is ' + pm.globals.get(\"IDAE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAE01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONAE01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAE01');});","        }","        if (instance.id == pm.globals.get(\"IDAE02\")) {","            pm.test('IDAE02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['abstractEnvironmentDefinition', 'abstractEnvironmentDefinition', 'description', 'href', 'id', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDAE01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAE01');});","            pm.test('href is ' + pm.globals.get(\"HREFAE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAE01');});","            pm.test('id is ' + pm.globals.get(\"IDAE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAE01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONAE01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAE01');});","        }","        if (instance.id == pm.globals.get(\"IDAE02\")) {","            pm.test('IDAE02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Environment}}abstractEnvironment?id={{IDAE01}}","host":["{{Test_Environment}}abstractEnvironment"],"query":[{"key":"id","value":"{{IDAE01}}"}]},"description":"This operation filter a AbstractEnvironment"},"response":[]},{"name":"/AbstractEnvironment?fields=version","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['id','href', 'version'];","      ","        pm.test('Instance must have id, href and filtered attribute', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)});","        pm.test('Instance has only id, href and filtered attribute', function () { pm.expect(requiredAttributes).to.include.members(Object.keys(instance))});","    });","","    ","}","else { ","  ","    pm.test('Array expected as response', function (){pm.expect.fail()});","  ","","}"],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Environment}}abstractEnvironment?fields=version","host":["{{Test_Environment}}abstractEnvironment"],"query":[{"key":"fields","value":"version"}]},"description":"This operation filter a AbstractEnvironment"},"response":[]},{"name":"/AbstractEnvironment?version={{VERSIONAE01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['abstractEnvironmentDefinition', 'abstractEnvironmentDefinition', 'description', 'href', 'id', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDAE01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAE01');});","            pm.test('href is ' + pm.globals.get(\"HREFAE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAE01');});","            pm.test('id is ' + pm.globals.get(\"IDAE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAE01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONAE01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAE01');});","        }","        if (instance.id == pm.globals.get(\"IDAE02\")) {","            pm.test('IDAE02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['abstractEnvironmentDefinition', 'abstractEnvironmentDefinition', 'description', 'href', 'id', 'version'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has description attribute', function() { pm.expect(instance[\"description\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has version attribute', function() { pm.expect(instance[\"version\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on description', function () {","            pm.expect(pm.response.text()).to.include(instance['description']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on version', function () {","            pm.expect(pm.response.text()).to.include(instance['version']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDAE01\")) {","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAE01');});","            pm.test('href is ' + pm.globals.get(\"HREFAE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAE01');});","            pm.test('id is ' + pm.globals.get(\"IDAE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAE01');});","            pm.test('version is ' + pm.globals.get(\"VERSIONAE01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAE01');});","        }","        if (instance.id == pm.globals.get(\"IDAE02\")) {","            pm.test('IDAE02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Environment}}abstractEnvironment?version={{VERSIONAE01}}","host":["{{Test_Environment}}abstractEnvironment"],"query":[{"key":"version","value":"{{VERSIONAE01}}"}]},"description":"This operation filter a AbstractEnvironment"},"response":[]}]},{"name":"E1","item":[{"name":"/AbstractEnvironment/404ID","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 404\", function () {","    pm.response.to.have.status(404);","});","","","postman.setNextRequest(\"End\");"],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Test_Environment}}AbstractEnvironment/7d64690e-174e-42da-8305-4da1fa13de09","host":["{{Test_Environment}}AbstractEnvironment"],"path":["7d64690e-174e-42da-8305-4da1fa13de09"]},"description":"This operation search for one of the created AbstractEnvironment"},"response":[]}]}]}